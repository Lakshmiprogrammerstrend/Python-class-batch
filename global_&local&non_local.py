# -*- coding: utf-8 -*-
"""GLOBAL &LOCAL&NON LOCAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JSJ4YiYhVCFYkaZg-Gy43f4qulrLbn-b
"""

# N -1 -N
#N%i=0


def divisor(n):
  x = len([ i for i in range(1,n+1) if not n%i])
  return x
print(divisor(12))#1,2,3,4,6,12

def calculate_square(x):
   return x**2
def display_square(x):
  squre = calculate_square(x)
  return f" The square of {x} is {squre}"
number = 5
result = display_square(number)
print(result)

def calculate_square(x):
   return x**2
calculate_square(2)

#for-[]
for num in range(1,11):
  print("hello")

while True:
  name = input("enter the name:")
  if name.isalpha():
    print("name:",name)
    break
  else:
    print("name canot be a integer")
    continue

x= " awesome"
def myfun():
  print("python is "+ x)
myfun()

x= " awesome"
def myfun():
  x = "fantastic"
  print("python is "+ x)
myfun()
print("python is "+ x)

x= " awesome"
def myfun():
  global x
  x = "fantastic"
  print("python is "+ x)
myfun()
print("python is "+ x)

global_var = 10
def modify_global():
  global global_var
  global_var = 20
  print(global_var)
modify_global()
print(global_var)

def outer_function():
  outer_var = 10
  def inner_function():
    outer_var = 20
    print(outer_var)
  inner_function()
  print(outer_var)
outer_function()

def outer_function():
  outer_var = 10
  def inner_function():
    nonlocal outer_var
    outer_var = 20
    print(outer_var)
  inner_function()
  print(outer_var)
outer_function()

#x,y,z --- x = y= z = sum ** 3
def sum_thrice(x,y,z):
  sum = x+y+z#1+2+3--1,1,1=3
  if x == y== z:#1==2==3--1==1==1
    sum = sum**3#3**3
  return sum
print(sum_thrice(1,2,3))#6
print(sum_thrice(1,1,1))#27

# is --is +
def new_string(text):
  if len(text) >= 2 and  text[:2]=="is":
    return text
  return "is"+text
new_string("is empty")

# is --is +
def new_string(text):
  if len(text) >= 2 and  text[:2]=="is":
    return text
  return "is"+text
new_string("IS empty")

# is --is +
def new_string(text):
  if len(text) >= 2 and  text[:2]=="is":
    return text
  return "is"+text
new_string("array")

#Palindrome noon = noon
def is_palindrome(s):
  s = s.lower()
  s = ''.join(s.split())
  return s == s[::-1]
text = input("enter a string:")
if is_palindrome(text):
  print(f"{text} is a palindrome")
else:
  print(f"{text} is not a palindrome")

#Palindrome noon = noon
def is_palindrome(s):
  s = s.lower()
  return s == s[::-1]
text = input("enter a string:")
if is_palindrome(text):
  print(f"{text} is a palindrome")
else:
  print(f"{text} is not a palindrome")