# -*- coding: utf-8 -*-
"""seaborn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F-jzOa5bsV5D4oEdgbT3wPHQeh5s2dqP
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

iris = sns.load_dataset("iris")

print(iris.head())

# Calculate the average sepal length for each species
average_sepal_length = iris.groupby('species')['sepal_length'].mean().reset_index()
average_sepal_length

#line chart
# Calculate the average sepal length for each species
average_sepal_length = iris.groupby('species')['sepal_length'].mean().reset_index()

# Create a line chart
sns.lineplot(x='species', y='sepal_length', data=average_sepal_length, marker='o')

# Add labels and title
plt.xlabel('Species')
plt.ylabel('Average Sepal Length')
plt.title('Average Sepal Length by Species')

# Rotate x-axis labels for better visibility
plt.xticks(rotation=90)

# Show the chart
plt.show()

#Bar chart

# Calculate the average sepal length for each species
average_sepal_length = iris.groupby('species')['sepal_length'].mean().reset_index()

# Create a bar graph
plt.figure(figsize=(8, 6))  # Adjust the figure size if needed
ax = sns.barplot(x='species', y='sepal_length', data=average_sepal_length, palette="Set2" )

for bars in ax.containers:
    ax.bar_label(bars)


# Add labels and title
plt.xlabel('Species')
plt.ylabel('Average Sepal Length')
plt.title('Average Sepal Length by Species')

# Show the graph
plt.show()

#COUNT PLOT

# Create a count plot to visualize the distribution of species
plt.figure(figsize=(8, 6))  # Adjust the figure size if needed
ax = sns.countplot(x='species', data=iris)
for bars in ax.containers:
    ax.bar_label(bars)
# Add labels and title
plt.xlabel('Species')
plt.ylabel('Count')
plt.title('Distribution of Iris Species')

# Show the count plot
plt.show()

correlation_matrix = iris.corr()
correlation_matrix

#Heatmap
# Create a correlation matrix using the `.corr()` method
correlation_matrix = iris.corr()

# Create a heatmap
plt.figure(figsize=(8, 6))  # Adjust the figure size if needed
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")

# Add a title
plt.title('Correlation Heatmap of Iris Dataset')

# Show the heatmap
plt.show()

#Scatter Plots:

# Create a scatter plot
plt.figure(figsize=(8, 6))  # Adjust the figure size if needed
sns.scatterplot(x='sepal_length', y='sepal_width', data=iris, hue='species', palette='viridis')

# Add labels and a title
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('Scatter Plot of Sepal Length vs. Sepal Width')

# Show the scatter plot
plt.show()

#Histograms:

# Create a histogram for sepal length
plt.figure(figsize=(8, 6))  # Adjust the figure size if needed
sns.histplot(iris['sepal_length'], bins=15, kde=False, color='blue')

# Add labels and a title
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Frequency')
plt.title('Histogram of Sepal Length')

# Show the histogram
plt.show()

#Density plots:
# KDE plot
# Create a density plot for sepal length
plt.figure(figsize=(8, 6))  # Adjust the figure size if needed
sns.kdeplot(iris['sepal_length'], shade=True, color='blue')

# Add labels and a title
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Density')
plt.title('Density Plot of Sepal Length')

# Show the density plot
plt.show()

#boxplot:

# Create a box plot for sepal length
plt.figure(figsize=(8, 6))  # Adjust the figure size if needed
sns.boxplot(x='species', y='sepal_length', data=iris, palette='Set2')

# Add labels and a title
plt.xlabel('Species')
plt.ylabel('Sepal Length (cm)')
plt.title('Box Plot of Sepal Length by Species')

# Show the box plot
plt.show()

# Calculate the count of each species
species_counts = iris['species'].value_counts()

# Create a pie chart
plt.figure(figsize=(6, 6))
plt.pie(species_counts, labels=species_counts.index, autopct='%1.2f%%', startangle=140)
plt.title('Distribution of Iris Flower Species')
plt.legend(title = 'iris')
plt.show()

"""**Distribution plots**

--distplot

--joinplot

--pairplot

#JoinPlot

A join plot allows to study the relationship between 2 numeric variables. The central chart display their correlation. It is usually a scatterplot, a hexbin plot, a 2D histogram or a 2D density plot
"""

df=sns.load_dataset("tips")

import seaborn as sns
sns.jointplot(x='tip',y='total_bill',data= df,kind='hex')

sns.jointplot(x='tip',y='total_bill',data=df,kind='reg')

"""#Pair plot

A “pairs plot” is also known as a scatterplot, in which one variable in the same data row is matched with another variable's value, like this: Pairs plots are just elaborations on this, showing all variables paired with all the other variables
"""

sns.pairplot(df)

sns.pairplot(df,hue='sex')

"""#Dist plot

Dist plot helps us to check the distribution of the columns feature
"""

sns.distplot(df['tip'])

sns.distplot(df['tip'],kde=False,bins=10)

"""#Violin Plot

Violin plot helps us to see both the distribution of data in terms of Kernel density estimation and the box plot
"""

sns.violinplot(x="total_bill", y="day", data=df,palette='rainbow')